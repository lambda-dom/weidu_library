//Libraries.
INCLUDE "%WEIDU_LIBRARY_DIR%/lists.tpa"


//Basic functions.
DEFINE_DIMORPHIC_FUNCTION get_array_count STR_VAR array = "" RET count BEGIN
    OUTER_SET count = 0
    ACTION_PHP_EACH "%array%" AS key => value BEGIN
        OUTER_SET count += 1
    END
END

//Searches.
DEFINE_DIMORPHIC_FUNCTION get_array_element STR_VAR array = "" key = "" default = "*" RET value BEGIN
    OUTER_TEXT_SPRINT value "%default%"
    ACTION_TRY
        ACTION_PHP_EACH "%array%" AS k => v BEGIN
            ACTION_IF ("%k%" STRING_EQUAL_CASE "%key%") BEGIN
                OUTER_TEXT_SPRINT value "%v%"
                //Match => leave loop early.
                SILENT
                FAIL "Result Found."
            END
        END
    //Silence error signaling match.
    WITH ~Failure("Result found.")~ BEGIN VERBOSE END
    DEFAULT
        ACTION_RERAISE
    END
END

DEFINE_DIMORPHIC_FUNCTION is_key_in_array STR_VAR array = "" key = "" RET bool BEGIN
    OUTER_SET bool = 0
    ACTION_TRY
        ACTION_PHP_EACH "%array%" AS k => _ BEGIN
            ACTION_IF ("%k%" STRING_EQUAL_CASE "%key%") BEGIN
                OUTER_SET bool = 1
                //Match => leave loop early.
                SILENT
                FAIL "Result Found."
            END
        END
    //Silence error signaling match.
    WITH ~Failure("Result found.")~ BEGIN VERBOSE END
    DEFAULT
        ACTION_RERAISE
    END
END

DEFINE_DIMORPHIC_FUNCTION find_key STR_VAR value = "" array = "" default = "*" RET key BEGIN
    OUTER_TEXT_SPRINT key "%default%"
    ACTION_TRY
        //Loop through array.
        ACTION_PHP_EACH "%array%" AS k => v BEGIN
            ACTION_IF ("%v%" STRING_EQUAL_CASE "%value%") BEGIN
                OUTER_TEXT_SPRINT key "%k%"
                //Match => leave loop early.
                SILENT
                FAIL "Result Found."
            END
        END
    //Silence error signaling match.
    WITH ~Failure("Result found.")~ BEGIN VERBOSE END
    DEFAULT
        ACTION_RERAISE
    END
END

DEFINE_DIMORPHIC_FUNCTION find_all_keys STR_VAR value = "" array = "" RET count RET_ARRAY list BEGIN
    OUTER_SET count = 0
    ACTION_DEFINE_ARRAY list BEGIN END
    ACTION_PHP_EACH "%array%" AS k => v BEGIN
        ACTION_IF ("%v%" STRING_EQUAL_CASE "%value%") BEGIN
            OUTER_TEXT_SPRINT $"list"("%count%") "%v%"
            OUTER_SET count += 1
        END
    END
END

//Builders.
DEFINE_DIMORPHIC_FUNCTION array_from_keys STR_VAR keys = "" value = "*" RET_ARRAY array BEGIN
    ACTION_DEFINE_ASSOCIATIVE_ARRAY array BEGIN END
    ACTION_PHP_EACH "%keys%" AS _ => key BEGIN
        OUTER_TEXT_SPRINT $"array"("%key%") "%value%"
    END
END

DEFINE_DIMORPHIC_FUNCTION enumerate_list STR_VAR keys = "" RET_ARRAY array BEGIN
    ACTION_DEFINE_ASSOCIATIVE_ARRAY array BEGIN END
    ACTION_PHP_EACH "%keys%" AS value => key BEGIN
        OUTER_TEXT_SPRINT $"array"("%key%") "%value%"
    END
END

DEFINE_DIMORPHIC_FUNCTION load_array INT_VAR col = 1 STR_VAR table = "" RET_ARRAY array BEGIN
    //Existence check.
    ACTION_IF NOT (FILE_EXISTS "%table%") BEGIN
        FAIL "load_array: file '%table%' does not exist."
    END

    ACTION_DEFINE_ASSOCIATIVE_ARRAY array BEGIN END
    COPY - "%table%" "override"
        //Sanity bounds check.
        COUNT_2DA_COLS cols
        PATCH_IF NOT ((1 <= col) AND (col < cols)) BEGIN
            PATCH_FAIL "load_array: column index '%col%' out of bounds."
        END

        READ_2DA_ENTRIES_NOW "table#rows" cols
        FOR (i = 0; i < table#rows; ++i) BEGIN
            READ_2DA_ENTRY_FORMER "table#rows" i 0 key
            READ_2DA_ENTRY_FORMER "table#rows" i col value
            PATCH_IF NOT ((2 = cols) AND ("%key%" STRING_EQUAL_CASE "2DA")) BEGIN
                TEXT_SPRINT $"array"("%key%") "%value%"
            END
        END
END
