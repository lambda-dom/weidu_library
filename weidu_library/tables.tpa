//Libraries.
INCLUDE "%WEIDU_LIBRARY_DIR%/lists.tpa"


//Builders.
DEFINE_DIMORPHIC_FUNCTION load_table STR_VAR file = "" fields = "" RET_ARRAY table BEGIN
    //Existence check.
    ACTION_IF NOT (FILE_EXISTS "%file%") BEGIN
        FAIL "load_table: file '%file%' does not exist."
    END

    //Construct fields list.
    LAF list_from_string STR_VAR
        string = "%fields%"
    RET count RET_ARRAY names = list END

    //Load table.
    ACTION_DEFINE_ASSOCIATIVE_ARRAY table BEGIN END
    COPY - ~%file%~ ~override~
        COUNT_2DA_COLS cols
        //Sanitize values.
        PATCH_IF NOT (count = cols) BEGIN
            PATCH_FAIL "load_table: number '%count%' of fields in '%fields%' is not equal to column number '%cols%' of table '%file%'."
        END

        READ_2DA_ENTRIES_NOW "table#rows" cols
        //Loop.
        FOR (j = 0; j < cols; ++j) BEGIN
            TEXT_SPRINT field $names("%j%")
            FOR (i = 0; i < table#rows; ++i) BEGIN
                READ_2DA_ENTRY_FORMER "table#rows" i j value
                TEXT_SPRINT $"table"("%i%" "%field%") "%value%"
            END
        END

        //Insert row count and fields.
        TEXT_SPRINT $"table"("table#count") "%table#rows%"
        TEXT_SPRINT $"table"("table#fields") "%fields%"
END

//Basic functions.
DEFINE_DIMORPHIC_FUNCTION get_table_row_count STR_VAR table = "" RET count BEGIN
    OUTER_TEXT_SPRINT count $"%table%"("table#count")
    ACTION_IF NOT (IS_AN_INT "%count%") BEGIN
        FAIL "get_table_row_count: count '%count%' of table '%table%' not an integer."
    END
END

DEFINE_DIMORPHIC_FUNCTION get_table_fields STR_VAR table = "" RET fields BEGIN
    OUTER_TEXT_SPRINT fields $"%table%"("table#fields")
END

DEFINE_DIMORPHIC_FUNCTION get_row_from_table INT_VAR row = 0 STR_VAR table = "" RET_ARRAY array BEGIN
    //Sanitize.
    LAF get_table_row_count STR_VAR table = "%table%" RET row_count = count END
    ACTION_IF NOT ((0 <= row) AND (row < row_count)) BEGIN
        FAIL "get_row_from_table: row '%row%' out of bounds."
    END

    //Construct fields list.
    LAF get_table_fields STR_VAR table = "%table%" RET fields END
    LAF list_from_string STR_VAR
        string = "%fields%"
    RET _ = count RET_ARRAY names = list END

    //Construct array.
    ACTION_DEFINE_ASSOCIATIVE_ARRAY array BEGIN END
    ACTION_PHP_EACH names AS _ => field BEGIN
        OUTER_TEXT_SPRINT $"array"("%field%") $"%table%"("%row%" "%field%")
    END
END

//Linear searches.
DEFINE_DIMORPHIC_FUNCTION find_table_row STR_VAR table = "" field = "" key = "" RET index BEGIN
    LAF get_table_row_count STR_VAR table = "%table%" RET row_count = count END
    OUTER_SET index = 0 - 1

    //Loop.
    OUTER_FOR (i = 0; (i < row_count) AND (index < 0); ++i) BEGIN
        OUTER_TEXT_SPRINT value $"%table%"("%i%" "%field%")
        ACTION_IF ("%key%" STRING_EQUAL_CASE "%value%") BEGIN
            OUTER_SET index = i
        END
    END
END

//Array builders.
DEFINE_DIMORPHIC_FUNCTION array_from_table STR_VAR table = "" key = "" value = "" RET_ARRAY array BEGIN
    LAF get_table_fields STR_VAR table = "%table%" RET names = fields END
    LAF list_from_string STR_VAR string = "%names%" RET count RET_ARRAY fields = list END

    //Check key is a valid field.
    LAF find_key STR_VAR
        array = "fields"
        value = "%key%"
    RET col = key END

    ACTION_IF ("%col%" STRING_EQUAL_CASE "*") BEGIN
        FAIL "array_from_table: '%key%' is not a valid field of '%table%'."
    END

    //Check value is a valid field.
    LAF find_key STR_VAR
        array = "fields"
        value = "%value%"
    RET col = key END

    ACTION_IF ("%col%" STRING_EQUAL_CASE "*") BEGIN
        FAIL "array_from_table: '%value%' is not a valid field of '%table%'."
    END

    //Construct array.
    ACTION_DEFINE_ASSOCIATIVE_ARRAY array BEGIN END
    LAF get_table_row_count STR_VAR table = "%table%" RET row_count = count END
    OUTER_FOR (i = 0; i < row_count; ++i) BEGIN
        OUTER_TEXT_SPRINT k $"%table%"("%i%" "%key%")
        OUTER_TEXT_SPRINT v $"%table%"("%i%" "%value%")
        OUTER_TEXT_SPRINT $array("%k%") "%v%"
    END
END
