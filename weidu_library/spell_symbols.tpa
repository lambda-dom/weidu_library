//Libraries.
INCLUDE "%WEIDU_LIBRARY_DIR%/2da.tpa"
INCLUDE "%WEIDU_LIBRARY_DIR%/arrays.tpa"
INCLUDE "%WEIDU_LIBRARY_DIR%/spells.tpa"
INCLUDE "%WEIDU_LIBRARY_DIR%/tables.tpa"


//Arrays.
LAF load_array STR_VAR
    table = "%WEIDU_LIBRARY_DIR%/resources/2da/spells/add_types.2da"
RET_ARRAY add_types = array END


//Action functions.
DEFINE_ACTION_FUNCTION add_spell_symbol INT_VAR
    level = 0
STR_VAR
    symbol = ""
    type = ""
    resource = ""
    patch = "*"
BEGIN
    //Sanitize.
    ACTION_IF NOT ((0 <= level) AND (level <= 9)) BEGIN
        FAIL "add_spell_symbol: '%level%' must be in the [0-9] range."
    END

    LAF get_array_element STR_VAR
        array = "add_types"
        key = "%type%"
    RET id = value END
    ACTION_IF (0 - 1 = id) BEGIN
        FAIL "add_spell_symbol: '%type%' is not a valid spell type."
    END

    LAF get_spell_res STR_VAR spell = "%symbol%" RET exists = resource END
    ACTION_IF NOT ("%exists%" STRING_EQUAL_CASE "*") BEGIN
        FAIL "add_spell_symbol: symbol '%symbol%' already exists in 'spell.ids'."
    END

    //Existence check.
    ACTION_IF NOT (FILE_EXISTS "%resource%.spl") BEGIN
        FAIL "add_spell_symbol: spell resource '%resource%.spl' not found."
    END

    ADD_SPELL "%resource%.spl" id level "%symbol%"
        PATCH_IF NOT ("%patch%" STRING_EQUAL_CASE "*") BEGIN
            LPF "%patch%" END
        END
END

DEFINE_ACTION_FUNCTION change_spell_symbol INT_VAR level = 0 STR_VAR symbol = "" type = "" BEGIN
    //Sanitize.
    ACTION_IF NOT ((0 <= level) AND (level <= 9)) BEGIN
        FAIL "change_spell_symbol: '%level%' must be an integer in the [0-9] range."
    END

    LAF get_array_element STR_VAR
        array = "add_types"
        key = "%type%"
    RET id = value END
    ACTION_IF (0 - 1 = id) BEGIN
        FAIL "change_spell_symbol: '%type%' is not a valid spell type."
    END

    LAF get_spell_res STR_VAR spell = "%symbol%" RET resource END
    ACTION_IF ("%resource%" STRING_EQUAL_CASE "*") BEGIN
        FAIL "change_spell_symbol: symbol '%symbol%' does not exist in 'spell.ids'."
    END

    //Existence check.
    ACTION_IF NOT (FILE_EXISTS_IN_GAME "%resource%.spl") BEGIN
        FAIL "change_spell_symbol: resource '%resource%.spl' for '%symbol%' does not exist in game." 
    END

    //Make original resource available and add it under new name.
    COPY_EXISTING "%resource%.spl" "override/%resource%.spl"
    ADD_SPELL "override/%resource%.spl" id level "%symbol%"
END


//Patchers for spell.ids.
DEFINE_PATCH_FUNCTION replace_spell_symbol STR_VAR new = "" old = "" BEGIN
    //Sanitize.
    LPF get_spell_res STR_VAR spell = "%old%" RET exists = resource END
    PATCH_IF ("%exists%" STRING_EQUAL_CASE "*") BEGIN
        PATCH_FAIL "change_spell_symbol: symbol '%old%' does not exist in 'spell.ids'."
    END

    LPF get_spell_res STR_VAR spell = "%new%" RET exists = resource END
    PATCH_IF NOT ("%exists%" STRING_EQUAL_CASE "*") BEGIN
        PATCH_FAIL "change_spell_symbol: symbol '%new%' already exists in 'spell.ids'."
    END

    LPF find_row_index INT_VAR col = 1 STR_VAR key = "%old%" RET row = index END
    SET_2DA_ENTRY row 1 2 "%new%"
END

DEFINE_PATCH_FUNCTION deprecate_spell_symbol STR_VAR symbol = "" BEGIN
    LPF replace_spell_symbol STR_VAR
        new = "%symbol%_DEPRECATED"
        old = "%symbol%"
    END
END

DEFINE_PATCH_FUNCTION replace_spell_symbol_hole INT_VAR level = 0 id = 0 STR_VAR symbol = "" type = "" BEGIN
    //Sanitize.
    PATCH_IF NOT ((0 <= level) AND (level <= 9)) BEGIN
        PATCH_FAIL "replace_spell_symbol_hole: '%level%' must be an integer in the [0-9] range."
    END

    PATCH_IF NOT ((0 <= id) AND (id <= 99)) BEGIN
        PATCH_FAIL "replace_spell_symbol_hole: '%id%' must be an integer in the [0-99] range."
    END

    LPF get_array_element STR_VAR
        array = "add_types"
        key = "%type%"
    RET type_id = value END
    PATCH_IF (0 - 1 = type_id) BEGIN
        PATCH_FAIL "replace_spell_symbol_hole: '%type%' is not a valid spell type."
    END

    LPF get_spell_res STR_VAR spell = "%symbol%" RET exists = resource END
    PATCH_IF NOT ("%exists%" STRING_EQUAL_CASE "*") BEGIN
        PATCH_FAIL "replace_spell_symbol_hole: symbol '%symbol%' already exists in 'spell.ids'."
    END

    spell_id = (1000 * type_id) + (100 * level) + id
    LPF find_row_index STR_VAR key = "%spell_id%" RET row = index END
    PATCH_IF NOT (0 - 1 = row) BEGIN
        PATCH_FAIL "replace_spell_symbol_hole: numeric id for symbol '%symbol%' already exists in 'spell.ids'."
    END

    //Add spell symbol.
    COUNT_2DA_ROWS 2 row_count
    INSERT_2DA_ROW row_count 2 "%spell_id% %symbol%"
END


//Table interface.
DEFINE_ACTION_FUNCTION add_spell_symbols STR_VAR table = "" patches = "*" BEGIN
    OUTER_TEXT_SPRINT blank "%WEIDU_LIBRARY_DIR%/resources/spl/blank"

    //Existence check.
    ACTION_IF NOT (FILE_EXISTS "%blank%.spl") BEGIN
        FAIL "add_spell_symbols: blank spell '%blank%.spl' not found. "
    END

    ACTION_IF NOT ("%patches%" STRING_EQUAL_CASE "*") BEGIN
        //Sanitize.
        ACTION_IF NOT (FILE_EXISTS "%patches%") BEGIN
            FAIL "install_resources: patches file '%patches%' does not exist."
        END

        //Include patches file.
        INCLUDE "%patches%"
    END

    //Load table
    LAF load_table STR_VAR
        file = "%table%"
        fields = "symbol:install:type:level:patch"
    RET_ARRAY resources = table END

    LAF get_table_row_count STR_VAR table = "resources" RET row_count = count END
    OUTER_FOR (i = 0; i < row_count; ++i) BEGIN
        LAF get_row_from_table INT_VAR row = i STR_VAR
            table = "resources"
        RET_ARRAY
            row = array
        END

        WITH_SCOPE BEGIN
            //Inject names in local scope.
            OUTER_TEXT_SPRINT symbol $"row"("symbol")
            OUTER_TEXT_SPRINT install $"row"("install")
            OUTER_TEXT_SPRINT type $"row"("type")
            OUTER_TEXT_SPRINT level $"row"("level")
            OUTER_TEXT_SPRINT patch $"row"("patch")

            ACTION_IF NOT (install = 0) BEGIN
                //Sanitize.
                ACTION_IF NOT (IS_AN_INT level) BEGIN
                    FAIL "add_spell_symbols: level '%level%' of row '%i%' is not an integer."
                END

                LAF add_spell_symbol INT_VAR
                    level = level
                STR_VAR
                    symbol = "%symbol%"
                    type = "%type%"
                    resource = "%blank%"
                    patch = "%patch%"
                END
            END
        END
    END
END

DEFINE_ACTION_FUNCTION change_spell_symbols STR_VAR table = "" BEGIN
    //Load table
    LAF load_table STR_VAR
        file = "%table%"
        fields = "symbol:install:type:level"
    RET_ARRAY resources = table END

    LAF get_table_row_count STR_VAR table = "resources" RET row_count = count END
    OUTER_FOR (i = 0; i < row_count; ++i) BEGIN
        LAF get_row_from_table INT_VAR row = i STR_VAR
            table = "resources"
        RET_ARRAY
            row = array
        END

        WITH_SCOPE BEGIN
            //Inject names in local scope.
            OUTER_TEXT_SPRINT symbol $"row"("symbol")
            OUTER_TEXT_SPRINT install $"row"("install")
            OUTER_TEXT_SPRINT type $"row"("type")
            OUTER_TEXT_SPRINT level $"row"("level")

            ACTION_IF NOT (install = 0) BEGIN
                //Sanitize.
                ACTION_IF NOT (IS_AN_INT level) BEGIN
                    FAIL "change_spell_symbols: level '%level%' of row '%i%' is not an integer."
                END

                LAF change_spell_symbol INT_VAR
                    level = level
                STR_VAR
                    symbol = "%symbol%"
                    type = "%type%"
                END
            END
        END
    END
END

DEFINE_ACTION_FUNCTION replace_spell_symbols STR_VAR table = "" BEGIN
    //Load table
    LAF load_table STR_VAR
        file = "%table%"
        fields = "new:install:old"
    RET_ARRAY resources = table END

    COPY_EXISTING "spell.ids" "override"
        LPF get_table_row_count STR_VAR table = "resources" RET row_count = count END
        FOR (i = 0; i < row_count; ++i) BEGIN
            LPF get_row_from_table INT_VAR row = i STR_VAR
                table = "resources"
            RET_ARRAY
                row = array
            END

            PATCH_WITH_SCOPE BEGIN
                //Inject names in local scope.
                TEXT_SPRINT new $"row"("new")
                TEXT_SPRINT install $"row"("install")
                TEXT_SPRINT old $"row"("old")

                PATCH_IF NOT (install = 0) BEGIN
                    LPF replace_spell_symbol STR_VAR
                        old = "%old%"
                        new = "%new%"
                    END
                END
            END
        END
    BUT_ONLY
END

DEFINE_ACTION_FUNCTION deprecate_spell_symbols STR_VAR table = "" BEGIN
    //Load table
    LAF load_table STR_VAR
        file = "%table%"
        fields = "symbol:install"
    RET_ARRAY resources = table END

    COPY_EXISTING "spell.ids" "override"
        LPF get_table_row_count STR_VAR table = "resources" RET row_count = count END
        FOR (i = 0; i < row_count; ++i) BEGIN
            LPF get_row_from_table INT_VAR row = i STR_VAR
                table = "resources"
            RET_ARRAY
                row = array
            END

            PATCH_WITH_SCOPE BEGIN
                //Inject names in local scope.
                TEXT_SPRINT symbol $"row"("symbol")
                TEXT_SPRINT install $"row"("install")

                PATCH_IF NOT (install = 0) BEGIN
                    LPF deprecate_spell_symbol STR_VAR symbol = "%symbol%" END
                END
            END
        END
    BUT_ONLY
END

DEFINE_ACTION_FUNCTION replace_spell_symbol_holes STR_VAR table = "" BEGIN
    //Load table
    LAF load_table STR_VAR
        file = "%table%"
        fields = "symbol:install:type:level:id"
    RET_ARRAY resources = table END

    COPY_EXISTING "spell.ids" "override"
        LPF get_table_row_count STR_VAR table = "resources" RET row_count = count END
        FOR (i = 0; i < row_count; ++i) BEGIN
            LPF get_row_from_table INT_VAR row = i STR_VAR
                table = "resources"
            RET_ARRAY
                row = array
            END

            PATCH_WITH_SCOPE BEGIN
                //Inject names in local scope.
                TEXT_SPRINT symbol $"row"("symbol")
                TEXT_SPRINT install $"row"("install")
                TEXT_SPRINT type $"row"("type")
                TEXT_SPRINT level $"row"("level")
                TEXT_SPRINT id $"row"("id")

                PATCH_IF NOT (install = 0) BEGIN
                    //Sanitize.
                    PATCH_IF NOT (IS_AN_INT level) BEGIN
                        PATCH_FAIL "replace_spell_symbol_holes: level '%level%' of row '%i%' is not an integer."
                    END

                    PATCH_IF NOT (IS_AN_INT level) BEGIN
                        PATCH_FAIL "replace_spell_symbol_holes: id '%id%' of row '%i%' is not an integer."
                    END

                    LPF replace_spell_symbol_hole INT_VAR
                        level = level
                        id = id
                    STR_VAR
                        symbol = "%symbol%"
                        type = "%type%"
                    END
                END
            END
        END
    BUT_ONLY
END
